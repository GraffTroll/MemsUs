from aiogram import Bot, types, Dispatcher, executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from datetime import datetime
import psycopg2
import random
from aiogram.utils.callback_data import CallbackData

memes = ['1', '2', '3', '4', '5', '6', '7', '8', '9',                 # –î–µ–ª–∞—é –≤–∏–¥ —Ç–∏–ø–∞ —à–∞—Ä—é –∑–∞ —Å–ø–∏—Å–∫–∏
         '10', '11', '12', '13', '14', '15', '16', '17', '18', '19',
         '20', '21', '22', '23', '24', '25', '26', '27', '28', '29',
         '30', '31', '32', '33', '34', '35', '36', '37', '38', '39',
         '40', '41', '42', '43', '44', '45', '46', '47', '48', '49',
         '50', '51', '52', '53', '54', '55', '56', '57', '58', '59',
         '60', '61', '62', '63', '64', '65', '66', '67', '68', '69',
         '70', '71', '72', '73', '74', '75', '76', '77', '78', '79',
         '80', '81', '82', '83', '84', '85', '86', '87', '88',
          ]


bot = Bot(token='6170342020:AAFpoZ7WaavFzGK8_4XGj8-U7TjkRLMdQ2U')

iad = 1
#######################–ë–ê–ó–ê –î–ê–ù–ù–´–•################################
connection = psycopg2.connect(
        host="127.0.0.1",
        user="postgres",
        password="12344321",
        database="MEME"
        )
connection.autocommit = True
##################################################################



#######################–¢–ï–õ–ï–ì–†–ê–ú –ë–û–¢###############################

#—Å–æ–∑–¥–∞—é –∫–Ω–æ–ø–∫–∏ –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
kb = ReplyKeyboardMarkup(resize_keyboard=True)
b1 = KeyboardButton(text='–ö–∞—Ç–∞–ª–æ–≥')
b2 = KeyboardButton(text='–ú–æ–∏ —Å–æ—Ö—Ä—ã')
b3 = KeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
kb.add(b1).add(b2).add(b3)

dp = Dispatcher(bot)   # –û–±–ª–µ–≥—á–∞—é —Å–µ–±–µ –∂–∏–∑–Ω—å


@dp.message_handler(commands=['start']) # –ü–æ —Ñ–∞–∫—Ç—É –¥–æ–ª–∂–Ω–∞ —Ä–µ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–ª—å—à–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
async def start_step(message: types.Message):
    global iad
    iad = "@"+message.from_user.username #–Æ–∑–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(iad)
    with connection.cursor() as cursor: # –ü—Ä–æ–≤–µ—Ä—è—é –µ—Å—Ç—å –ª–∏ –æ–Ω –≤ –±–¥
        cursor.execute(
            f"""
            SELECT id FROM user_meme WHERE user_ = '{iad}';
        
            """
                    )
        if cursor.fetchone() == None:   # –î–æ–±–∞–≤–ª—è—é –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            print(12)
            with connection.cursor() as cursor:
                cursor.execute(
                    f"""
                    INSERT INTO user_meme (user_, save_pic, see_like, see_dislike, see_all) VALUES ('{iad}', ARRAY['1'], 0, 0, 0); 
                    """
                           )                                                               # –ô–æ, —ç—Ç–æ –Ω–µ –±–∞–≥, —ç—Ç–æ —Ñ–∏—á–∞ –ª–æ–ª
            await bot.send_message(chat_id=message.from_user.id,
                               text='–í—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞—Ä–µ–≥–∞–ª–∏—Å—å',
                               reply_markup=kb)
        else:
        

            await bot.send_message(chat_id=message.from_user.id,
                           text='–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∞–Ω—ã',
                           reply_markup=kb)

                                        # –ù–∞—á–∏–Ω–∞—é –¥–µ–ª–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å 


  
@dp.message_handler(text='–ö–∞—Ç–∞–ª–æ–≥') # –í –∑–∞–¥—É–º–∫–µ –∑–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–º–∞ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º —Ä–µ–∞–∫—Ü–∏–∏
async def catalog_step(message: types.Message):
    global random_pic
    ikb = InlineKeyboardMarkup(row_width=2)
    ib1 = InlineKeyboardButton(text='‚ù§Ô∏è',
                               callback_data="like")
    ib2 = InlineKeyboardButton(text='üíî',
                               callback_data="dislike") # –ö–Ω–æ–ø–∫–∏ –ø–æ –∏–Ω–ª–∞–π–Ω—É
    ikb.add(ib1, ib2)
    random_pic = random.choice(memes)
    MEMEphoto = f"C:\\Users\\Q\\Desktop\\–ü—Ä–æ–≥–∞\\–ú–µ–º—ã\\1 ({random_pic}).jpg" # –°–ª—É—á–∞–π–Ω–∞—è —Ñ–æ—Ç–æ—á–∫–∞
    photo = open(MEMEphoto, 'rb')
    await bot.send_photo(message.chat.id,
                         photo=photo,
                         caption="–ö–∞–∫ —Ç–µ–±–µ?",
                         reply_markup=ikb)
    with connection.cursor() as cursor: # –ë—ã—Å—Ç—Ä–µ–Ω—å–∫–æ –¥–æ–±–∞–≤–ª—è—é –ø—Ä–æ—Å–º–æ—Ç—Ä 
            cursor.execute(
            f"""UPDATE user_meme
            SET see_all = see_all + 1 
            WHERE user_ = '{iad}';"""
            )

@dp.message_handler(text='–ú–æ–∏ —Å–æ—Ö—Ä—ã') # –•–æ—á—É –≤—ã–≤–µ—Å—Ç–∏ —Å–ª—É—á–∞–π–Ω—É—é –ø–∏–∫—á—É –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö
async def sohr_step(message: types.Message):
    with connection.cursor() as cursor: # –°–æ–±—Å—Ç–≤ –±–µ—Ä—É —Å–ø–∏—Å–æ—á–µ–∫ —Å —Å–æ—Ö—Ä–∞–º–∏ 
            cursor.execute(
            f"""SELECT save_pic FROM user_meme
            WHERE user_ = '{iad}'
            """                       
                        )
            sohra = cursor.fetchone()
    random_sohra = random.choice(sohra[0])
    print(random_sohra)
    MEMEphoto = f"C:\\Users\\Q\\Desktop\\–ü—Ä–æ–≥–∞\\–ú–µ–º—ã\\1 ({random_sohra}).jpg" # –û–ø—è—Ç—å —Å–ª—É—á–∞–π–Ω–∞—è —Ñ–æ—Ç–æ—á–∫–∞ –Ω–æ –∏–∑ —Å–æ—Ö—Ä
    photo = open(MEMEphoto, 'rb')
                        
                        
    await bot.send_photo(chat_id=message.from_user.id,
                         photo=photo,
                         reply_markup=kb)



@dp.message_handler(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') # –ó–¥–µ—Å—å –Ω–∞–≤–µ—Ä–Ω–æ –±—É–¥—É —Å—á–∏—Ç–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —á—É–≤–∞–∫ –Ω–∞–∂–∞–ª + –∏ —Å–∫–æ–ª—å–∫–æ -
async def stata_step(message: types.Message):
    with connection.cursor() as cursor: 
            cursor.execute(
            f"""SELECT see_all FROM user_meme
            WHERE user_ = '{iad}'
            """                       
            )
            see_all = cursor.fetchone()

            
    with connection.cursor() as cursor: 
            cursor.execute(
            f"""SELECT see_like FROM user_meme
            WHERE user_ = '{iad}'
            """                       
            )
            see_like = cursor.fetchone()


    with connection.cursor() as cursor: 
            cursor.execute(
            f"""SELECT see_dislike FROM user_meme
            WHERE user_ = '{iad}'
            """                       
            )
            see_dislike = cursor.fetchone()



    await bot.send_message(chat_id=message.from_user.id,
                           text=f'–ß—É–≤–∞–∫, —á–µ–∫–Ω–∏ —Å–≤–æ—é —Å—Ç–∞—Ç—É—Ç –ø–æ —Å–æ—Ö—Ä–∞–º\n–í—Å–µ–≥–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª –ø–∏–∫—á: {see_all[0]}\n–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤–æ—Ç —Å—Ç–æ–ª—å–∫–æ: {see_like[0]}\n–ö—Ä–∏–Ω–∂–∞–Ω—É–ª —Å {see_dislike[0]}'
                                 ,
                           reply_markup=kb)




@dp.callback_query_handler()                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–∏—Ö –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
async def otvet_step(callback: types.CallbackQuery):
    global random_pic
    print(random_pic)
    if callback.data == 'like':
        await callback.answer('–ô–æ, —Ç—ã –µ—ë —Å–æ—Ö—Ä–∞–Ω–∏–ª')
        with connection.cursor() as cursor: # –ë—ã—Å—Ç—Ä–µ–Ω—å–∫–æ –¥–æ–±–∞–≤–ª—è—é –ª–∞–π–∫ 
            cursor.execute(
            f"""UPDATE user_meme
            SET see_like = see_like + 1 
            WHERE user_ = '{iad}';""" 
            )
        with connection.cursor() as cursor: # –î–æ–±–∞–≤–ª—è—é —Å–æ—Ö—Ä—É –≤ –ë–î  
            cursor.execute(
            f"""UPDATE user_meme
            SET save_pic = ARRAY_APPEND(save_pic, '{random_pic}') 
            WHERE user_ = '{iad}';"""                           
            )
        await catalog_step(callback.message)



        
        
    if callback.data == 'dislike':           # –ó–¥–µ—Å—å —Ç–æ–∂–µ –Ω—É–∂–Ω–æ —É—á—ë—Ç –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–∫–æ–ª—å–∫–æ —á–µ–ª —Ä–∞–∑ —Ç—ã–∫–Ω—É–ª
        await callback.answer('–î—É–º–∞—é —Ç–µ–±–µ —Å—Ç–æ–∏—Ç –ø–æ–∏—Å–∫–∞—Ç—å –µ—â—ë')
        with connection.cursor() as cursor: # –ë—ã—Å—Ç—Ä–µ–Ω—å–∫–æ –¥–æ–±–∞–≤–ª—è—é –∫—Ä–∏–Ω–≥–µ 
            cursor.execute(
            f"""UPDATE user_meme
            SET see_dislike = see_dislike + 1 
            WHERE user_ = '{iad}';""" 
            )
        await catalog_step(callback.message)


if __name__ == '__main__':
    executor.start_polling(dispatcher=dp,
                           skip_updates=True)












































